# Generated by Django 3.1.6 on 2021-03-06 15:29

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Contestant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initial_handicap', models.FloatField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text="Name of event, eg 'September League Day'", max_length=50, null=True)),
                ('date', models.DateTimeField()),
                ('rounds', models.IntegerField(help_text='Number of rounds that players are required to complete during this league event')),
                ('awards', models.ManyToManyField(blank=True, to='tleague.Award')),
                ('cards', models.ManyToManyField(blank=True, to='tleague.Card')),
            ],
        ),
        migrations.CreateModel(
            name='Hole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('par', models.IntegerField(default=3)),
                ('length', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email_address', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=50, null=True)),
                ('handicap_number', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strokes', models.IntegerField(blank=True, null=True)),
                ('date', models.DateTimeField()),
                ('contestant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tleague.contestant')),
            ],
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('league_points', models.CharField(default='10,9,8,7,6,5,4,3,2,1', help_text='\nPoints assignments for league event ranking (based on HC adjusted total score).\nIndex of list is rank, value is points earned. Last element of list is used as the\nminimum attainable points for a contestant who does not complete a league event, or\nwho does not yet have enough rounds recorded in league to calculate a HC. Must be a comma separated list of integers.\n            ', max_length=50, verbose_name='League Points Assignment')),
                ('handicap_multiplier', models.FloatField(default=0.8, help_text="\nA value that is multiplied against a contestant's raw HC delta average. The result of this calculation becomes the contestant's current HC.")),
                ('handicap_min_rounds', models.IntegerField(default=2, help_text='\nThe minimum number of rounds required before a HC is evaluated for a contestant if they\ndo not have an initial HC. The contestant will still earn min attainable points for\nthe league attendance even without an initial HC while they are accruing the requisite\nnumber of rounds for a HC. Previous events will be retro-calculated using newly calculated\nHC meaning points and ranks will move in retrospect when a contestant finally plays enough rounds to get a HC.\n', verbose_name='Min rounds for HC')),
                ('handicap_min_rounds_avg', models.IntegerField(default=5, help_text="\nThe max number of best score cards to use to calculate a player's current HC\n", verbose_name='Best Cards to use for HC')),
                ('handicap_max_rounds_avg', models.IntegerField(default=8, help_text='\nThe number of past cards to consider when chosing the best cards for a player for their HC calculation. This value needs to be larger than the number of best cards used for HC calculation above.\n', verbose_name='Max Cards to consider for HC')),
                ('contestants', models.ManyToManyField(blank=True, to='tleague.Contestant')),
                ('events', models.ManyToManyField(blank=True, to='tleague.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Layout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('holes', models.ManyToManyField(to='tleague.Hole')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('layouts', models.ManyToManyField(to='tleague.Layout')),
            ],
        ),
        migrations.AddField(
            model_name='contestant',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tleague.player'),
        ),
        migrations.AddField(
            model_name='card',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tleague.course'),
        ),
        migrations.AddField(
            model_name='card',
            name='layout',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tleague.layout'),
        ),
        migrations.AddField(
            model_name='card',
            name='scores',
            field=models.ManyToManyField(blank=True, to='tleague.Score'),
        ),
        migrations.AddField(
            model_name='award',
            name='contestant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tleague.contestant'),
        ),
    ]
